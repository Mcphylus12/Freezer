1. INSERT INTO Customer
VALUES (1234, 'John Smith', 'john.smith@gmail.com');

2. INSERT INTO Ticket(TicketID, Problem, Priority, LoggedTime, CustomerID, ProductID)
VALUES (0001, 'its broken', 2, NOW(), 1234, 5271);

3. INSERT INTO TicketUpdate
VALUES(9564, 'Fixed something. Should work now', NOW(), 0001, 12);

4. SELECT Ticket.*, MAX(TicketUpdate.UpdateTime) AS LastUpdate --finds the latest date for the group of update times
From Ticket LEFT JOIN TicketUpdate ON Ticket.TicketID=TicketUpdate.TicketID
WHERE Ticket.Status='OPEN'--joins the two table and selects only open tickets
GROUP BY Ticket.TicketID;
--lists open tickets

5. UPDATE Ticket
SET Status='CLOSED'
WHERE TicketID=0001;

6. SELECT Customer.Name AS CustomerName, Ticket.LoggedTime, Ticket.Problem, Staff.Name AS StaffName, TicketUpdate.UpdateTime, TicketUpdate.Message 
From Customer, Ticket, Staff RIGHT JOIN TicketUpdate on TicketUpdate.StaffID=Staff.StaffID
Where Ticket.TicketID=2 AND 
TicketUpdate.TicketID=Ticket.TicketID AND
Ticket.CustomerID=Customer.CustomerID
 --joins all 3 tables
ORDER BY TicketUpdate.UpdateTime ASC; --lists dates chronologically
--lists a ticket along with its problem and messages.

7. SELECT Ticket.TicketID, COUNT(TicketUpdate.TIcketID) AS Updates, 
MIN(TicketUpdate.UpdateTime) - Ticket.LoggedTime AS TimeBeforeFirstResponse,
MAX(TicketUpdate.UpdateTime) - Ticket.LoggedTime AS TimeBeforeLastResponse
FROM Ticket LEFT JOIN TicketUpdate on Ticket.TicketID=TicketUpdate.TicketID
WHERE Ticket.Status='CLOSED'
GROUP BY Ticket.TicketID;
--gets the amount of updates in a ticket along with the time taken for the forst response and the last response

8. UPDATE Ticket
Set Status='CLOSED'
WHERE Ticket.TicketID IN (
SELECT tn.TicketID FROM(
  SELECT TicketUpdate.TicketID, (NOW() - MAX(TicketUpdate.UpdateTime)) AS AGE
  FROM TicketUpdate
  GROUP BY TicketUpdate.TicketID
  HAVING (NOW() - MAX(TicketUpdate.UpdateTime))> interval '1 day' --finds tickets older than 24 hours
) tn
) AND Ticket.TicketID IN (
    SELECT TicketUpdate.TicketID
    FROM TicketUpdate
    WHERE TicketUpdate.StaffID IS NOT NULL
);--Check there is at least 1 response from staff

9. DELETE FROM Customer
WHERE CustomerID=1 AND CustomerID NOT IN(
SELECT DISTINCT Ticket.CustomerID FROM Ticket
);--deletes a customer as long as they are not in a ticket


